# Django란 무엇일까 


## 목차 
* 정의
* 다른 프레임 워크의 차이점
* 파일 구조 및 각 파일들의 의미
* 관계형 데이터 베이스


*** 

<br>

### 정의

***

#### Django는 `Python` 언어의 `Framework`의 종류 중 하나로써 서버를 만드든다. 

<br>

여기서 `Framework`란 이미 짜여진 틀이라고 생각하면 되는데 웹사이트의 서버를 제작할 때 한땀 한땀 하나씩 
모두 제작하게 된다면 매우 비효율적이고 많은 시간과 노력이 든다. 
그래서 이미 개발자들이 웹사이트 서버를 개설할 때 필요한 기능들 중 공통으로 필요한 부분들을
추려서 쉽게 구현을 할 수 있도록 틀을 만들어 놓은 것을 `Framework` 라고 한다. 

즉, 미리 짜여진 코드이기 때문에 라이브리러 마냥 사용법을 익히기만 하면 금세 웹사이트 서버를 
만들 수 있다. 

비슷한 `Framework`로는 `Flask`, `pyramid` 가 있다. 




<br>
<br>
<br>


### 다른 프레임 워크의 차이점 
***

#### 다른 프레임워크에 비해 거대한 프레임 워크이다!

<br>

제목에서 알 수 있듯이 `Python` 기반의 `Framework` 중에서는 가장 거대 하다고 할 수 있다.
그만큼 많은 기능들이 있고 많은 실무에서 사용한다고 들었다. 

가령컨데 이전에 배운 `Flask` 의 경우 `Django`에  비하면 작은 프레임워크라 제공되는 기능들이 
별로 없어서 직접 하나씩 구현을 했어야 했다고 한다. - "실습을 하면서 충격이 컸다."

예를들어 팔로우 / 팔로잉 기능을 `Flask` 에서 구현을 하려면 직접 데이터를 삭제하고 넣고 하는 로직을 
짰어야 했는데 이곳에서는 `관계형 데이터 베이스`를 사용하기 때문에 관계들만 잘 설정해주면
금새 메소드로만 기능구현을 할 수가 있다.

그래서 더더욱 `Django`를 배워야 하는 이유가 생긴것같다. 하지만 그만큼 많은 기능들을 모두 익히려면
여러 연습이 필요할 것 같다.

요약하자면 

`Flask` - 작은 `Framework`, 적은 기능들, 단순한 데이터 베이스, 정직한(?)파일구조  

<br>

`Django`  - 거대한 `'Framework`, 많은 기능들, 관계형 데이트 베이스, 파일 구조

<br>
<br>
<br>

### 파일 구조 및 용어 
***

<br>

#### `Django`에서는 특별하게 기능별로 파일을 나눈다.

* `전체 프로젝트 폴더` &nbsp;&nbsp;:&nbsp;&nbsp; 전체 `Django`를 관리하는 폴더 ( 전체적인 설정 )
  * `__init__.py` : 초기 파일 
  * `asgi.py` : 배포 관련 파일
  * `settings.py` : 프로젝트 설정 관련 파일
  * `urls.py` : 전체 프로젝트의 경로 설정 
  * `views.py` : 전체 프로젝트의 함수 설정
  * `wegi.py` : 

<br>  

* `다른 기능 폴더` : 각 기능 별로 나뉘는 폴더 
  * `migrations` : 각 기능에서 필요한 데이터 베이스 수정 내용
    * `001_init.py` : 데이터 베이스 수정 파일
    * `__init__.py` : migration 파일 위치 설정
  * `__init__.py` :  기능 별 파일 위치 설정
  * `admin.py` : 관리자 권한과 관련된 설정
  * `apps.py` : apps.이름_Config 파일이 세팅시 필요
  * `models.py` : Database 모델 설정
  * `tests.py` : test를 할 수 있는 파일
  * `urls.py` : API 에 대한 경로 설정
  * `views.py` : 각 API에 대한 함수 설정